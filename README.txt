# TDAI - Backend do Sistema Inteligente de Gera√ß√£o de T√≠tulos e Descri√ß√µes

Este √© o backend para o projeto TDAI (Titles and Descriptions Artificial Intelligence), um sistema SaaS projetado para auxiliar na gest√£o e enriquecimento de informa√ß√µes de produtos de e-commerce, com foco em gera√ß√£o de conte√∫do por IA.

## üìú Sobre o Projeto

O TDAI visa processar listas de itens de produtos (inicialmente automotivos, mas com potencial de expans√£o), que muitas vezes chegam com informa√ß√µes m√≠nimas via planilhas ou cat√°logos PDF. O sistema enriquece essas informa√ß√µes buscando dados na web (sites de fornecedores, cat√°logos, Google Search) e, por fim, gera t√≠tulos e descri√ß√µes otimizados utilizando intelig√™ncia artificial. O backend √© constru√≠do com FastAPI e PostgreSQL.

## ‚ú® Funcionalidades Principais do Backend

* **Autentica√ß√£o e Autoriza√ß√£o:**
    * Registo de utilizadores e login com JWT (JSON Web Tokens).
    * Recupera√ß√£o de senha por email.
    * Login social com Google e Facebook (OAuth) (endpoint de callback em `routers/social_auth.py` a ser verificado/corrigido).
    * Gest√£o de Roles (ex: `free_user`, `admin`) e Planos de assinatura (ex: Gratuito, Ilimitado).
    * Prote√ß√£o de rotas baseada em utilizador autenticado e superusu√°rio (`routers/auth_utils.py`).
* **Gest√£o de Dados:**
    * CRUD completo para `Produtos` (`routers/produtos.py`).
    * CRUD completo para `Fornecedores` (`routers/fornecedores.py`).
    * Associa√ß√£o de produtos a fornecedores e utilizadores.
* **Processamento e Enriquecimento de Produtos:**
    * Upload de ficheiros (Excel, CSV, PDF) para cria√ß√£o de produtos em lote (`routers/uploads.py`, `services/file_processing_service.py`).
    * Enriquecimento web automatizado via tarefas de fundo (`routers/web_enrichment.py`, `services/web_data_extractor_service.py`):
        * Busca de informa√ß√µes no Google (Google Custom Search API).
        * Scraping de conte√∫do de p√°ginas web com Playwright.
        * Extra√ß√£o de texto principal (Trafilatura) e metadados estruturados (Extruct).
        * Extra√ß√£o de dados adicionais com LLM (OpenAI).
    * Armazenamento do status e log do processo de enriquecimento (`models.Produto.status_enriquecimento_web`, `log_enriquecimento_web`).
* **Gera√ß√£o de Conte√∫do com IA:**
    * Gera√ß√£o de t√≠tulos e descri√ß√µes de produtos utilizando a API da OpenAI via tarefas de fundo (`routers/generation.py`, `services/ia_generation_service.py`).
    * Gest√£o de chaves de API OpenAI (global em `core/config.py` e por utilizador em `models.User`).
    * Registo de hist√≥rico de uso da IA (`models.UsoIA`, `routers/uso_ia.py`).
    * Sistema de verifica√ß√£o de limites de uso da IA baseado no plano do utilizador (`services/limit_service.py`).
* **Administra√ß√£o:**
    * Endpoints para analytics (contagens globais, uso da IA por plano/tipo, atividade de utilizadores) (`routers/admin_analytics.py`).
    * Cria√ß√£o autom√°tica de roles, planos e um utilizador administrador na inicializa√ß√£o do sistema (`main.py` evento de startup).

## üõ†Ô∏è Tecnologias Utilizadas

* **Framework:** FastAPI
* **Banco de Dados:** PostgreSQL
* **ORM:** SQLAlchemy
* **Valida√ß√£o de Dados:** Pydantic
* **Autentica√ß√£o:** JWT, Passlib (para hashing de senhas), Authlib (para OAuth)
* **Processamento Ass√≠ncrono:** `async/await`, `BackgroundTasks` do FastAPI
* **Web Scraping/Extra√ß√£o:** Playwright, Trafilatura, Extruct, Google Custom Search API
* **IA:** OpenAI API
* **Envio de Emails:** FastAPI-Mail

## üìÇ Estrutura do Projeto Backend

A pasta `Backend/` cont√©m toda a l√≥gica da API e est√° organizada da seguinte forma:

Backend/
‚îú‚îÄ‚îÄ core/                 # Configura√ß√µes centrais, l√≥gica de email, etc.
‚îÇ   ‚îú‚îÄ‚îÄ init.py
‚îÇ   ‚îú‚îÄ‚îÄ config.py         # Carrega vari√°veis de ambiente, define settings.
‚îÇ   ‚îî‚îÄ‚îÄ email_utils.py    # Utilit√°rios para envio de email.
‚îú‚îÄ‚îÄ routers/              # Define os endpoints da API.
‚îÇ   ‚îú‚îÄ‚îÄ init.py
‚îÇ   ‚îú‚îÄ‚îÄ admin_analytics.py
‚îÇ   ‚îú‚îÄ‚îÄ auth_utils.py
‚îÇ   ‚îú‚îÄ‚îÄ fornecedores.py
‚îÇ   ‚îú‚îÄ‚îÄ generation.py
‚îÇ   ‚îú‚îÄ‚îÄ password_recovery.py
‚îÇ   ‚îú‚îÄ‚îÄ produtos.py
‚îÇ   ‚îú‚îÄ‚îÄ social_auth.py    # (Requer revis√£o do conte√∫do)
‚îÇ   ‚îú‚îÄ‚îÄ uploads.py
‚îÇ   ‚îú‚îÄ‚îÄ uso_ia.py
‚îÇ   ‚îî‚îÄ‚îÄ web_enrichment.py
‚îú‚îÄ‚îÄ services/             # L√≥gica de neg√≥cios e integra√ß√µes.
‚îÇ   ‚îú‚îÄ‚îÄ init.py
‚îÇ   ‚îú‚îÄ‚îÄ file_processing_service.py
‚îÇ   ‚îú‚îÄ‚îÄ ia_generation_service.py
‚îÇ   ‚îú‚îÄ‚îÄ limit_service.py
‚îÇ   ‚îî‚îÄ‚îÄ web_data_extractor_service.py
‚îú‚îÄ‚îÄ templates/            # Templates HTML (ex: para emails).
‚îÇ   ‚îî‚îÄ‚îÄ password_reset_email.html
‚îú‚îÄ‚îÄ init.py
‚îú‚îÄ‚îÄ auth.py               # L√≥gica de autentica√ß√£o, tokens, OAuth.
‚îú‚îÄ‚îÄ crud.py               # Fun√ß√µes de acesso ao banco de dados (CRUD).
‚îú‚îÄ‚îÄ database.py           # Configura√ß√£o da conex√£o com o banco de dados.
‚îú‚îÄ‚îÄ main.py               # Ponto de entrada da aplica√ß√£o FastAPI.
‚îú‚îÄ‚îÄ models.py             # Defini√ß√µes dos modelos SQLAlchemy.
‚îî‚îÄ‚îÄ schemas.py            # Defini√ß√µes dos schemas Pydantic.


## ‚öôÔ∏è Configura√ß√£o e Execu√ß√£o

Siga os passos abaixo para configurar e executar o backend localmente.

**1. Pr√©-requisitos:**

* Python 3.8+
* PostgreSQL (servidor em execu√ß√£o)
* Servidor SMTP (para funcionalidade de email, como recupera√ß√£o de senha)
* Chaves de API:
    * OpenAI API Key
    * Google Custom Search Engine (CSE) API Key e CSE ID
    * Google OAuth Client ID e Client Secret
    * Facebook OAuth Client ID e Client Secret

**2. Clonar o Reposit√≥rio (se aplic√°vel):**

```bash
git clone <url-do-seu-repositorio>
cd <PROJECT_ROOT_DIRECTORY_NAME> # Navegue at√© a raiz do projeto TDAI
3. Criar e Ativar um Ambiente Virtual:

Recomendado para isolar as depend√™ncias do projeto. Execute na raiz do projeto (<PROJECT_ROOT_DIRECTORY_NAME>):

Bash

python -m venv venv
source venv/bin/activate  # Linux/macOS
# venv\Scripts\activate    # Windows
4. Instalar Depend√™ncias:


Todas as bibliotecas necess√°rias para o backend j√° est√£o listadas em
`requirements-backend.txt`. Execute na raiz do projeto:

```bash
pip install -r requirements-backend.txt
```

Bash

J√° existe um arquivo requirements-backend.txt com as principais bibliotecas.
Execute na raiz do projeto:

Bash

pip install -r requirements-backend.txt
playwright install


5. Configurar Vari√°veis de Ambiente:

As configura√ß√µes da aplica√ß√£o s√£o carregadas a partir de um arquivo .env localizado na raiz do projeto (<PROJECT_ROOT_DIRECTORY_NAME>/.env).

Crie um arquivo chamado .env na raiz do projeto.

**Nunca coloque senhas ou chaves reais diretamente neste arquivo.** Use vari√°veis de ambiente ou um gerenciador de segredos para armazenar credenciais com seguran√ßa.

Voc√™ precisar√° adicionar as seguintes vari√°veis (um arquivo .env.example seria ideal para listar todas as chaves necess√°rias):

Snippet de c√≥digo

# Backend/core/config.py espera estas vari√°veis
DATABASE_URL="postgresql://USER:PASSWORD@HOST:PORT/DB_NAME" # Ex: postgresql://postgres:password@localhost:5432/tdai_db
SECRET_KEY="sua_chave_secreta_super_forte_aqui" # Importante para JWT

REFRESH_SECRET_KEY="change-me"
REFRESH_SECRET_KEY="sua_chave_refresh_super_forte_aqui"

ALGORITHM="HS256"
ACCESS_TOKEN_EXPIRE_MINUTES=60

# OpenAI
OPENAI_API_KEY="sk-..."

# Google OAuth
GOOGLE_CLIENT_ID="..."
GOOGLE_CLIENT_SECRET="..."
GOOGLE_REDIRECT_URI="http://localhost:8000/auth/google/callback" # Ajuste se seu backend rodar em outra porta

# Facebook OAuth
FACEBOOK_CLIENT_ID="..."
FACEBOOK_CLIENT_SECRET="..."
FACEBOOK_REDIRECT_URI="http://localhost:8000/auth/facebook/callback" # Ajuste se necess√°rio

# Google Search API (Custom Search Engine)
GOOGLE_CSE_API_KEY="..."
GOOGLE_CSE_ID="..."

# Configura√ß√µes de Email (FastAPI-Mail)
MAIL_USERNAME="..."
MAIL_PASSWORD="..."
MAIL_FROM="seu_email@example.com"
MAIL_PORT=587
MAIL_SERVER="smtp.example.com"
MAIL_FROM_NAME="Equipe TDAI"
MAIL_STARTTLS="True" # True ou False
MAIL_SSL_TLS="False"  # True ou False
USE_CREDENTIALS="True" # True ou False
VALIDATE_CERTS="True"  # True ou False

# URL do Frontend (para links em emails, etc.)
FRONTEND_URL="http://localhost:5173" # Ou a porta do seu frontend Vite/React

# Opcional: para o usu√°rio admin padr√£o criado no startup
ADMIN_EMAIL="<ADMIN_EMAIL>"
ADMIN_PASSWORD="<ADMIN_PASSWORD>"
Preencha os valores corretos para cada vari√°vel. O arquivo Backend/core/config.py define como essas vari√°veis s√£o lidas.

6. Migra√ß√µes do Banco de Dados:

Este projeto utiliza SQLAlchemy.

Se estiver usando Alembic (recomendado para produ√ß√£o): Certifique-se de que o Alembic est√° configurado (normalmente com alembic.ini e uma pasta alembic/ dentro de Backend/). Execute as migra√ß√µes:
Bash

cd Backend  # Navegue para a pasta Backend onde alembic.ini geralmente reside
alembic upgrade head
cd ..     # Volte para a raiz do projeto
Se N√ÉO estiver usando Alembic: A linha models.Base.metadata.create_all(bind=engine) em Backend/main.py (atualmente comentada) precisaria ser descomentada para criar as tabelas automaticamente ao iniciar a aplica√ß√£o. No entanto, isso n√£o √© recomendado para gerenciamento de schema a longo prazo.
7. Executar a Aplica√ß√£o Backend:

Na raiz do projeto (<PROJECT_ROOT_DIRECTORY_NAME>), execute o script run_backend.py:

Bash

python run_backend.py
Este script (run_backend.py) ir√° configurar o ambiente e iniciar o servidor Uvicorn.
A API estar√° dispon√≠vel em http://localhost:8000 e a documenta√ß√£o interativa (Swagger UI) em http://localhost:8000/docs.

üìù Endpoints da API
A API possui diversos endpoints para gerenciar os recursos. A melhor forma de explor√°-los √© atrav√©s da documenta√ß√£o interativa gerada pelo FastAPI:

Documenta√ß√£o Swagger UI: http://localhost:8000/docs
Documenta√ß√£o ReDoc: http://localhost:8000/redoc